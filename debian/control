Source: node-hmac-drbg
Section: javascript
Priority: optional
Maintainer: Debian Javascript Maintainers <pkg-javascript-devel@lists.alioth.debian.org>
Uploaders: Bastien Roucari√®s <rouca@debian.org>
Build-Depends:
 debhelper-compat (= 13)
 , dh-buildinfo , nodejs
 , dpkg-dev (>= 1.17.14)
 , node-assert <!nocheck>
 , node-hash.js <!nocheck>
 , node-minimalistic-crypto-utils <!nocheck>
 , mocha (>= 1.20) <!nocheck>
Standards-Version: 4.5.1
Homepage: https://github.com/indutny/hmac-drbg#readme
Vcs-Git: https://salsa.debian.org/js-team/node-hmac-drbg.git
Vcs-Browser: https://salsa.debian.org/js-team/node-hmac-drbg

Package: node-hmac-drbg
Architecture: all
Depends:
 ${misc:Depends}
 , nodejs
 , node-assert
 , node-hash.js
 , node-minimalistic-crypto-utils
Description: Deterministic random bit generator (hmac) in pure javascript
 This is a pure javascript implementation of deterministic random bit
 generators defined in  section 10.1.2 of NIST SP 800-90A.
 .
 A  DRBG mechanism uses an algorithm that produces a sequence of bits
 from an initial value that is determined by a seed that is determined
 from the entropy input. Once the seed is provided and the initial
 value is determined, the DRBG is said to be instantiated and may be
 used to produce output.
 .
 Because of the deterministic nature of the process, a DRBG is
 said to producepseudorandom bits, rather than random bits. The seed
 used to instantiate the DRBG must contain sufficient entropy to
 provide an assurance of randomness. If the seed is kept secret,and the
 algorithm is well designed, the bits output by the DRBG will be
 unpredictable, up to the instantiated security strength of the DRBG.
 .
 Node.js is an event-based server-side JavaScript engine.
